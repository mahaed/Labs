#Lab 4 Part 2
#Mahaed Mohamud & Sean Wright
#ECEGR 2220 
#4/
#The Main Objective of this part is to generate a program that meticulously calculating a Fibonacci number. 



.data

	a:	.word	0	#Initially Stores variables a, b , c
	b:	.word	0
	c:	.word 	0

    		.text #Readable only section include executable code
main:

	addi	a2, zero, 3 	# Set it equal to 3 in order to perform Fibonacci(3) in the next function progam, fibonacci sequence. 
	
	jal	theFibonaccisequence
	
	sw	a0, a, t6       #Stores the value in A. 
	
	
	addi	a2, zero, 10 	# Set it equal to 10 in order to perform Fibonacci(10) in the next function progam, fibonacci sequence. 
	
	jal	theFibonaccisequence
	
	sw	a0, b, t6         #Stores the value in B . 


	addi	a2, zero, 20 	# Set it equal to 20 in order to perform Fibonacci(20) in the next function progam, fibonacci sequence. 
	
	jal	theFibonaccisequence
	
	sw	a0, c, t6       #Stores the value in C. 
	 
	li      a7, 10		#Exit The Program.
	ecall

	

theFibonaccisequence:
	addi 	sp, sp, -12	#Adjust the stack pointer for a, b, and c in order to create a stack to store these three values.
	sw 	ra, 0(sp)	#Store the value of first number in the stack firstly.
	sw 	s0, 4(sp)	#Store the value of second number in the stack secondly.
	sw 	s1, 8(sp)	#Store the value of third number in the stack thirdly.

	add 	s0, a2 , zero	#Add each of the three numerical parameters into the register s0 in order to properly complete the Fibonacci Sequence. 
	
	addi	t1, zero ,1	#Set t1 to 1 to be incorporated for checking if s0 equals to t1 or not in the next two beq statements. 
	
	beq 	s0, zero, returnZero	#Check if s0 equals to zero, if so then it directly jumps to returnzero. 
	beq 	s0, t1, returnOne 	#check if s0 equals to 1, if so then it directly jumps to returnone.

	addi 	a2, s0, -1	#Store the value after it was decremented by 1  to store a new value that is one less than previous value. 
	
	jal 	theFibonaccisequence  #This represents as fibonacci(n-1).
	
	add 	s1, zero, a0	#Store the value of n -1 in the register s1. 
	addi 	a2, s0, -2	#Store the value after it was decremented by 2  to store a new value that is two less than previous value
	
	jal 	theFibonaccisequence	 #This represents as fibonacci(n-2).
	
	add 	a0, a0, s1       	# Store the two function arguments with its parameters which is fibonacci(n-1) + fibonacci (n-2) into this register to save it. 
	
exit:
				#After it is completed, it will proceed to restore those values back into their respective registers as mentioned. 
	lw 	ra, 0(sp)       #restore the  first value back into register ra .
	
	lw 	s0, 4(sp)       #restore the second value back into register s1 .
	
	lw 	s1, 8(sp)	#restore the third value back into register s1.
	
	addi 	sp, sp, 12  	#Re-adjust the stack pointer for a, b, c  in order to create a stack to store these three values. 
	
	jr 	ra, 0		
	
	
returnZero:     
	li 	a0, 0		#Return 0 after itself loaded 0 into the register a0 then return back with this value. 
	j	exit		#It directly moves on to exit the program . 

returnOne:
	li	a0, 1		#Return 1 after itself loaded 1 into the register a0 then return back with this value. loads 1 into a0
	j	exit		# It directly moves on to exit the program. 
	

	
	


